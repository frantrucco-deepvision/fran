* Package configuration
** Package and archives

#+BEGIN_SRC emacs-lisp
(require 'package)

(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)

(add-to-list 'package-archives
             '("org" . "http://orgmode.org/elpa/") t)

;; keep the installed packages in .emacs.d
(setq package-user-dir (expand-file-name "elpa" user-emacs-directory))
(package-initialize)

;; update the package metadata if the local cache is missing
(unless package-archive-contents (package-refresh-contents))

#+END_SRC

** Use-package

#+BEGIN_SRC emacs-lisp
;; Install use-package, unless it is already installed
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-verbose t)
#+END_SRC

* Personal Information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Francisco Carlos Trucco"
      user-mail-address "franciscoctrucco@gmail.com")
#+END_SRC

* Better Interfacing
** General
#+BEGIN_SRC emacs-lisp

;; The toolbar, scrollbar and menubar are just a waste of valuable
;; screen space
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(when (fboundp 'menu-bar-mode) (menu-bar-mode -1))

;; the blinking cursor is nothing, but an annoyance
(blink-cursor-mode -1)

;; disable the annoying bell ring
(setq ring-bell-function 'ignore)

;; disable startup screen
(setq inhibit-startup-screen t)

;; enable y/n answers
(fset 'yes-or-no-p 'y-or-n-p)

;; Nice scrolling
(setq scroll-margin 0
  scroll-conservatively 100000
  scroll-preserve-screen-position 1)

;; Mode line settings
(line-number-mode t)
(column-number-mode t)
(size-indication-mode t)

#+END_SRC

** Evil
#+BEGIN_SRC emacs-lisp

  ;; This work-around prevents evil mode from auto-completing
  ;; after pressing <ESC>
  (setq evil-want-abbrev-expand-on-insert-exit nil)

  (use-package evil
    :ensure t
    :init
    (setq evil-want-keybinding nil)
    :config
    (evil-mode t))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init 'neotree)
    (evil-collection-init 'git-timemachine))

  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>"))

#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp

(use-package magit
  :ensure t)

(use-package evil-magit
  :ensure t)

(use-package git-timemachine
  :ensure t)

(use-package git-wip-timemachine
  :ensure t)

#+END_SRC

** TouchPadOff in emacs!

#+BEGIN_SRC emacs-lisp

  ;; Turn touchpad off when using emacs
  ;; This depends on ~/bin/touchpad_id.sh in order to work properly

  (defconst XINPUT-TOUCHPAD-ID (shell-command-to-string "~/bin/touchpad_id.sh"))
  (defconst XINPUT-DISABLE-TOUCHPAD (concat "xinput --disable " XINPUT-TOUCHPAD-ID))
  (defconst XINPUT-ENABLE-TOUCHPAD  (concat "xinput --enable " XINPUT-TOUCHPAD-ID))
  (defconst SYNCLIENT-DISABLE-TOUCHPAD "synclient TouchpadOff=1")
  (defconst SYNCLIENT-ENABLE-TOUCHPAD  "synclient TouchpadOff=0")

  (defconst DISABLE-TOUCHPAD XINPUT-DISABLE-TOUCHPAD)
  (defconst ENABLE-TOUCHPAD  XINPUT-ENABLE-TOUCHPAD)

  (defun touchpad-off (&optional frame)
    (interactive)
    (shell-command DISABLE-TOUCHPAD))

  (defun touchpad-on (&optional frame)
    (interactive)
    (shell-command ENABLE-TOUCHPAD))

(add-hook 'focus-in-hook #'touchpad-off)
(add-hook 'focus-out-hook #'touchpad-on)
(add-hook 'delete-frame-functions #'touchpad-on)
(add-hook 'kill-emacs-hook #'touchpad-on)

#+END_SRC

** Installed Packages

#+BEGIN_SRC emacs-lisp

(use-package which-key
  :ensure t
  :config
  (which-key-mode +1))

(use-package helm
  :ensure t
  :config
  (require 'helm-config)
  (put 'dired-find-alternate-file 'disabled nil)
  (helm-mode 1)
  (global-set-key (kbd "M-x") #'helm-M-x)
  (global-set-key (kbd "C-x C-f") #'helm-find-files))

(use-package eyebrowse
  :ensure t
  :config
  (defun eyebrowse-goto-configuration-workspace ()
  "Switch to workspace 0, open package configuration file."
    (interactive)
    (eyebrowse-switch-to-window-config-0)
    (find-file "~/.emacs.d/configuration.org"))
  (progn
    (define-key eyebrowse-mode-map (kbd "M-0")
      'eyebrowse-goto-configuration-workspace)

    (define-key eyebrowse-mode-map (kbd "M-1")
      'eyebrowse-switch-to-window-config-1)

    (define-key eyebrowse-mode-map (kbd "M-2")
      'eyebrowse-switch-to-window-config-2)

    (define-key eyebrowse-mode-map (kbd "M-3")
      'eyebrowse-switch-to-window-config-3)

    (define-key eyebrowse-mode-map (kbd "M-4")
      'eyebrowse-switch-to-window-config-4)

    (define-key eyebrowse-mode-map (kbd "M-5")
      'eyebrowse-switch-to-window-config-5)

    (eyebrowse-mode t)
    (setq eyebrowse-new-workspace t)))

(use-package ag
  :ensure t
)

(use-package projectile
  :ensure t
)
#+END_SRC

** File Managers

#+BEGIN_SRC emacs-lisp

  (use-package neotree
    :ensure t
    :config
    (setq neo-smart-open t)
    (neo-global--do-autorefresh)

    ;; Hide these files in neotree
    (setq neo-hidden-regexp-list
    (append '("\\.v.d$"
              "\\.vo$"
              "\\.glob$"
              "\\.aux$"
              "\\.log$"
              "\\.toc$"
              "\\.bbl$"
              "\\.blg$"
              "_region_.*")
    neo-hidden-regexp-list))
    )

  (use-package ranger
    :ensure t
    :config
    (global-set-key (kbd "C-x d")
                    '(lambda ()
                       "Hide neotree before opening ranger"
                       (interactive) (neotree-hide) (ranger))))

#+END_SRC

* Better Defaults
** Loading files, Garbage collection, Saving Files, etc.

#+BEGIN_SRC emacs-lisp
;; Always load newest byte code
(setq load-prefer-newer t)

;; reduce the frequency of garbage collection by making it happen on
;; each 50MB of allocated data (the default is on every 0.76MB)
(setq gc-cons-threshold 50000000)

;; warn when opening files bigger than 100MB
(setq large-file-warning-threshold 100000000)

(defconst trucco-savefile-dir (expand-file-name "savefile" user-emacs-directory))

;; create the savefile dir if it doesn't exist
(unless (file-exists-p trucco-savefile-dir)
  (make-directory trucco-savefile-dir))

;; store all backup and autosave files in the tmp dir
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; revert buffers automatically when underlying files are changed externally
(global-auto-revert-mode t)

#+END_SRC

** Emacs Sessions
#+BEGIN_SRC emacs-lisp
;; Save Emacs Sessions
(desktop-save-mode 1)
#+END_SRC

** Coding Systems
#+BEGIN_SRC emacs-lisp

;; Coding systems
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)

#+END_SRC

** Built-in Packages

#+BEGIN_SRC emacs-lisp

(use-package uniquify
  :config
  (setq uniquify-buffer-name-style 'forward)
  (setq uniquify-separator "/")
  ;; rename after killing uniquified
  (setq uniquify-after-kill-buffer-p t)
  ;; don't muck with special buffers
  (setq uniquify-ignore-buffers-re "^\\*"))

;; saveplace remembers your location in a file when saving files
(use-package saveplace
  :config
  (setq save-place-file (expand-file-name "saveplace" trucco-savefile-dir))
  ;; activate it for all buffers
  (setq-default save-place t))

(use-package savehist
  :config
  (setq savehist-additional-variables
        ;; search entries
        '(search-ring regexp-search-ring)
        ;; save every minute
        savehist-autosave-interval 60
        ;; keep the home clean
        savehist-file (expand-file-name "savehist" trucco-savefile-dir))
  (savehist-mode +1))

(use-package recentf
  :config
  (setq recentf-save-file (expand-file-name "recentf" trucco-savefile-dir)
        recentf-max-saved-items 500
        recentf-max-menu-items 15
        ;; disable recentf-cleanup on Emacs start, because it can cause
        ;; problems with remote files
        recentf-auto-cleanup 'never)
  (recentf-mode +1))

#+END_SRC

** Installed Packages

#+BEGIN_SRC emacs-lisp

(use-package super-save
  :ensure t
  :config
  (super-save-mode +1))

(use-package undo-tree
  :ensure t
  :config
  ;; autosave the undo-tree history
  (setq undo-tree-history-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq undo-tree-auto-save-history t))

#+END_SRC

* Better Editing
** Indentation, tabs, spaces, newlines, etc.
#+BEGIN_SRC emacs-lisp
    ;; Emacs modes typically provide a standard means to change the
    ;; indentation width -- eg. c-basic-offset: use that to adjust your
    ;; personal indentation width, while maintaining the style (and
    ;; meaning) of any files you load.
    (setq-default indent-tabs-mode nil)   ;; don't use tabs to indent
    (setq-default tab-width 4)            ;; but maintain correct appearance

    ;; Newline at end of file
    (setq require-final-newline t)

    ;; smart tab behavior - indent or complete
    (setq tab-always-indent 'complete)

    ;; highlight the current line
    (global-hl-line-mode +1)

    (custom-set-variables
      '(initial-frame-alist (quote ((fullscreen . maximized)))))

  ;; Split horizontally
  (setq split-height-threshold nil)
  (setq split-width-threshold 80)
#+END_SRC

** Built-in Packages

#+BEGIN_SRC emacs-lisp

(use-package paren
  :config
  (show-paren-mode +1))

(use-package whitespace
  :init
  (dolist (hook '(prog-mode-hook text-mode-hook))
    (add-hook hook #'whitespace-mode))
  (add-hook 'before-save-hook #'whitespace-cleanup)
  :config
  (setq whitespace-line-column 80) ;; limit line length
  (setq whitespace-style '(face tabs trailing)))

#+END_SRC

** Installed Packages

#+BEGIN_SRC emacs-lisp

(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1)
  (define-key evil-visual-state-map (kbd "s") #'evil-surround-region))

(use-package evil-mc
  :ensure t
  :config
  (global-evil-mc-mode 1))

(use-package smartparens
  :ensure t
  :config
  (smartparens-mode 1))

(use-package flycheck
  :ensure t
  :config
  (add-hook 'after-init-hook #'global-flycheck-mode))

(use-package company
  :ensure t
  :config
  (global-company-mode))

(use-package google-translate
  :ensure t
  :config
  (setq google-translate-default-source-language "en")
  (setq google-translate-default-target-language "es")
  (global-set-key "\C-ct" 'google-translate-at-point)
  (global-set-key "\C-cT" 'google-translate-query-translate))

(use-package avy
  :ensure t
  :config
  (global-set-key (kbd "C-;") 'avy-goto-word-1))

(use-package yasnippet
  :ensure t
  :config
  (yas-reload-all)
  (add-hook 'prog-mode-hook #'yas-minor-mode)

  ;; Add yasnippet support for all company backends
  ;; https://github.com/syl20bnr/spacemacs/pull/179
  (defvar company-mode/enable-yas t
  "Enable yasnippet for all backends.")

  (defun company-mode/backend-with-yas (backend)
  (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
      backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
)

(use-package yasnippet-snippets
  :ensure t)

#+End_SRC

* Languages
** Org
Remember to install org-mode before using emacs. The built-in version
of org-mode is outdated.

#+BEGIN_SRC emacs-lisp

(use-package org
  :ensure t
  :config
  (setq org-src-fontify-natively t)       ;; Highlight code blocks in org-mode
  (setq org-link-frame-setup
        (quote ((vm . vm-visit-folder-other-frame)
                (vm-imap . vm-visit-imap-folder-other-frame)
                (gnus . org-gnus-no-new-news)
                (file . find-file)        ;; Open file in the same frame and window
                (wl . wl-other-frame))))
  (setq org-log-done 'time)
  (setq org-todo-keywords
    '((sequence "TODO" "DOING" "DONE")))
  (setq org-agenda-span 30)               ;; look 30 days into the future
  (setq org-agenda-start-on-weekday nil)  ;; Start agenda view from today
  (define-key global-map (kbd "C-c a") 'org-agenda)
  (org-babel-do-load-languages 'org-babel-load-languages '((shell . t)))
  )

(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

(use-package org-tempo)
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp

(use-package markdown-mode
  :ensure t)

#+END_SRC
** Haskell

#+BEGIN_SRC emacs-lisp

(use-package haskell-mode
  :ensure t)

#+END_SRC

** Bibtex

#+BEGIN_SRC emacs-lisp
(use-package helm-bibtex
  :ensure t)
#+END_SRC

See [[http://kitchingroup.cheme.cmu.edu/blog/2014/05/15/Using-org-ref-to-keep-your-bibtex-files-in-order/][this blog]] for more info.
#+BEGIN_SRC emacs-lisp
(use-package org-ref
  :ensure t)
#+END_SRC

** OCaml
#+BEGIN_SRC emacs-lisp
(use-package tuareg
  :ensure t)

(use-package merlin
  :ensure t
  :config
    (let ((opam-share (ignore-errors (car (process-lines "opam" "config" "var" "share")))))
    (when (and opam-share (file-directory-p opam-share))
    ;; Register Merlin
    (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
    (autoload 'merlin-mode "merlin" nil t nil)
    ;; Automatically start it in OCaml buffers
    (add-hook 'tuareg-mode-hook 'merlin-mode t)
    (add-hook 'caml-mode-hook 'merlin-mode t)
    ;; Use opam switch to lookup ocamlmerlin binary
    (setq merlin-command 'opam))))

#+END_SRC

** Latex

#+BEGIN_SRC emacs-lisp

  (add-hook 'LaTeX-mode-hook #'outline-minor-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

  (use-package latex-math-preview
    :ensure t)

  (use-package auctex
    :defer t
    :ensure t
    :config)

  (eval-after-load "evil-maps"
    (dolist (map '(evil-motion-state-map
                   evil-insert-state-map
                   evil-emacs-state-map))
            (define-key (eval map) "'" nil)))

    (setq LaTeX-math-abbrev-prefix '"'")

  ;; (setq-default TeX-master nil) ; Query for master file.

#+END_SRC

** Proof General

#+BEGIN_SRC emacs-lisp

(unless (file-directory-p "~/.emacs.d/lisp/PG")
        (shell-command "git clone https://github.com/ProofGeneral/PG ~/.emacs.d/lisp/PG;
                        cd ~/.emacs.d/lisp/PG; make;"))

(load "~/.emacs.d/lisp/PG/generic/proof-site")

(use-package company-coq
  :ensure t
  :config
  (add-hook 'coq-mode-hook #'company-coq-mode))

(custom-set-variables '(coq-prog-name "/home/fran/.opam/opam-coq.8.8.1/4.02.3/bin/coqtop -Q . Top") '(proof-three-window-enable t))

;; Three windows always hybrid policy
;; Docs: https://proofgeneral.github.io/doc/userman/ProofGeneral_9/#index-proof_002dlayout_002dwindows
(setq proof-three-window-mode-policy 'hybrid)

#+END_SRC

* Bindings

#+BEGIN_SRC emacs-lisp

  (evil-leader/set-key "ft"    'neotree-toggle
                       "bb"    'switch-to-buffer
                       "bd"    'kill-this-buffer
                       "e"     'eval-last-sexp
                       "gs"    'magit-status
                       "<SPC>" 'helm-M-x
                       "/"     'projectile-ag
                       "p"     'preview-buffer)

#+END_SRC

* Themes

#+BEGIN_SRC emacs-lisp
    (use-package fill-column-indicator
      :ensure t)

    (use-package all-the-icons
      :ensure t)
  ;; You should only run this once
  ;; (all-the-icons-install-fonts)

    ;; (use-package spacemacs-theme
    ;;   :ensure t
    ;;   :defer t
    ;;   :init
    ;;   (load-theme 'spacemacs-dark t)
    ;;   (set-frame-font "Deja Vu Sans Mono 11" nil t)
    ;; )

    (use-package doom-themes
      :ensure t
      :config
      ;; Global settings (defaults)
      (setq doom-themes-enable-bold t ; if nil, bold is universally disabled
            doom-themes-enable-italic t) ; if nil, italics is universally disabled

      ;; Load the theme keep in mind that each theme may have their own settings.
      ;; * doom-one
      ;;   doom-one-light
      ;;   doom-vibrant
      ;;   doom-city-lights
      ;;   doom-dracula
      ;;   doom-Iosvkem
      ;;   doom-molokai
      ;; * doom-nord
      ;;   doom-nord-light
      ;;   doom-opera
      ;;   doom-opera-light
      ;; * doom-nova
      ;; * doom-peacock
      ;;   doom-solarized-light
      ;;   doom-sourcerer
      ;;   doom-spacegrey
      ;;   doom-tomorrow-night
      ;;   doom-tomorrow-day

      (load-theme 'doom-nord t)

      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)

      ;; Enable custom neotree theme (all-the-icons must be installed!)
      (doom-themes-neotree-config) ;; or for treemacs users

      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config))

    (use-package spaceline
      :ensure t
      :demand t
      :init
      (setq powerline-default-separator 'arrow-fade)
      :config
      (require 'spaceline-config)
      (spaceline-emacs-theme)
      (spaceline-helm-mode)
      (spaceline-info-mode)
      (setq spaceline-buffer-size-p nil)
      (setq spaceline-minor-modes-p nil))


#+END_SRC

